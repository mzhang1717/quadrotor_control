/* Auto-generated by genmsg_cpp for file /home/mingfeng/ros_workspace/quadrotor_input/srv/NotifyController.srv */
#ifndef QUADROTOR_INPUT_SERVICE_NOTIFYCONTROLLER_H
#define QUADROTOR_INPUT_SERVICE_NOTIFYCONTROLLER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace quadrotor_input
{
template <class ContainerAllocator>
struct NotifyControllerRequest_ {
  typedef NotifyControllerRequest_<ContainerAllocator> Type;

  NotifyControllerRequest_()
  : status(0)
  {
  }

  NotifyControllerRequest_(const ContainerAllocator& _alloc)
  : status(0)
  {
  }

  typedef uint8_t _status_type;
  uint8_t status;

  enum { INACTIVE = 0 };
  enum { ACTIVE = 1 };

  typedef boost::shared_ptr< ::quadrotor_input::NotifyControllerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_input::NotifyControllerRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct NotifyControllerRequest
typedef  ::quadrotor_input::NotifyControllerRequest_<std::allocator<void> > NotifyControllerRequest;

typedef boost::shared_ptr< ::quadrotor_input::NotifyControllerRequest> NotifyControllerRequestPtr;
typedef boost::shared_ptr< ::quadrotor_input::NotifyControllerRequest const> NotifyControllerRequestConstPtr;



template <class ContainerAllocator>
struct NotifyControllerResponse_ {
  typedef NotifyControllerResponse_<ContainerAllocator> Type;

  NotifyControllerResponse_()
  : controllerStatus(0)
  {
  }

  NotifyControllerResponse_(const ContainerAllocator& _alloc)
  : controllerStatus(0)
  {
  }

  typedef uint8_t _controllerStatus_type;
  uint8_t controllerStatus;

  enum { INACTIVE = 0 };
  enum { ACTIVE = 1 };
  enum { ERROR = 2 };

  typedef boost::shared_ptr< ::quadrotor_input::NotifyControllerResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_input::NotifyControllerResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct NotifyControllerResponse
typedef  ::quadrotor_input::NotifyControllerResponse_<std::allocator<void> > NotifyControllerResponse;

typedef boost::shared_ptr< ::quadrotor_input::NotifyControllerResponse> NotifyControllerResponsePtr;
typedef boost::shared_ptr< ::quadrotor_input::NotifyControllerResponse const> NotifyControllerResponseConstPtr;


struct NotifyController
{

typedef NotifyControllerRequest Request;
typedef NotifyControllerResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct NotifyController
} // namespace quadrotor_input

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::quadrotor_input::NotifyControllerRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::quadrotor_input::NotifyControllerRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_input::NotifyControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d61f9f02f8e62a848a4f123bd505ca06";
  }

  static const char* value(const  ::quadrotor_input::NotifyControllerRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd61f9f02f8e62a84ULL;
  static const uint64_t static_value2 = 0x8a4f123bd505ca06ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_input::NotifyControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "quadrotor_input/NotifyControllerRequest";
  }

  static const char* value(const  ::quadrotor_input::NotifyControllerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_input::NotifyControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 status\n\
uint8 INACTIVE=0\n\
uint8 ACTIVE = 1\n\
\n\
";
  }

  static const char* value(const  ::quadrotor_input::NotifyControllerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::quadrotor_input::NotifyControllerRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::quadrotor_input::NotifyControllerResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::quadrotor_input::NotifyControllerResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_input::NotifyControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2b745321d80f66a753afac78b9ba4fe0";
  }

  static const char* value(const  ::quadrotor_input::NotifyControllerResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2b745321d80f66a7ULL;
  static const uint64_t static_value2 = 0x53afac78b9ba4fe0ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_input::NotifyControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "quadrotor_input/NotifyControllerResponse";
  }

  static const char* value(const  ::quadrotor_input::NotifyControllerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_input::NotifyControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 controllerStatus\n\
uint8 INACTIVE=0\n\
uint8 ACTIVE = 1\n\
uint8 ERROR = 2\n\
\n\
\n\
";
  }

  static const char* value(const  ::quadrotor_input::NotifyControllerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::quadrotor_input::NotifyControllerResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::quadrotor_input::NotifyControllerRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.status);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct NotifyControllerRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::quadrotor_input::NotifyControllerResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.controllerStatus);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct NotifyControllerResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<quadrotor_input::NotifyController> {
  static const char* value() 
  {
    return "7abd43fb91320bb7554c448c6f28715c";
  }

  static const char* value(const quadrotor_input::NotifyController&) { return value(); } 
};

template<>
struct DataType<quadrotor_input::NotifyController> {
  static const char* value() 
  {
    return "quadrotor_input/NotifyController";
  }

  static const char* value(const quadrotor_input::NotifyController&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<quadrotor_input::NotifyControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7abd43fb91320bb7554c448c6f28715c";
  }

  static const char* value(const quadrotor_input::NotifyControllerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<quadrotor_input::NotifyControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "quadrotor_input/NotifyController";
  }

  static const char* value(const quadrotor_input::NotifyControllerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<quadrotor_input::NotifyControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7abd43fb91320bb7554c448c6f28715c";
  }

  static const char* value(const quadrotor_input::NotifyControllerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<quadrotor_input::NotifyControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "quadrotor_input/NotifyController";
  }

  static const char* value(const quadrotor_input::NotifyControllerResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // QUADROTOR_INPUT_SERVICE_NOTIFYCONTROLLER_H

