/* Auto-generated by genmsg_cpp for file /home/mingfeng/ros_workspace/quadrotor_input/srv/SelectStateSource.srv */
#ifndef QUADROTOR_INPUT_SERVICE_SELECTSTATESOURCE_H
#define QUADROTOR_INPUT_SERVICE_SELECTSTATESOURCE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace quadrotor_input
{
template <class ContainerAllocator>
struct SelectStateSourceRequest_ {
  typedef SelectStateSourceRequest_<ContainerAllocator> Type;

  SelectStateSourceRequest_()
  : strPoseTopicSelected()
  , strVelocityTopicSelected()
  {
  }

  SelectStateSourceRequest_(const ContainerAllocator& _alloc)
  : strPoseTopicSelected(_alloc)
  , strVelocityTopicSelected(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _strPoseTopicSelected_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  strPoseTopicSelected;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _strVelocityTopicSelected_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  strVelocityTopicSelected;


  typedef boost::shared_ptr< ::quadrotor_input::SelectStateSourceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_input::SelectStateSourceRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SelectStateSourceRequest
typedef  ::quadrotor_input::SelectStateSourceRequest_<std::allocator<void> > SelectStateSourceRequest;

typedef boost::shared_ptr< ::quadrotor_input::SelectStateSourceRequest> SelectStateSourceRequestPtr;
typedef boost::shared_ptr< ::quadrotor_input::SelectStateSourceRequest const> SelectStateSourceRequestConstPtr;



template <class ContainerAllocator>
struct SelectStateSourceResponse_ {
  typedef SelectStateSourceResponse_<ContainerAllocator> Type;

  SelectStateSourceResponse_()
  : bSuccess(false)
  {
  }

  SelectStateSourceResponse_(const ContainerAllocator& _alloc)
  : bSuccess(false)
  {
  }

  typedef uint8_t _bSuccess_type;
  uint8_t bSuccess;


  typedef boost::shared_ptr< ::quadrotor_input::SelectStateSourceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_input::SelectStateSourceResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SelectStateSourceResponse
typedef  ::quadrotor_input::SelectStateSourceResponse_<std::allocator<void> > SelectStateSourceResponse;

typedef boost::shared_ptr< ::quadrotor_input::SelectStateSourceResponse> SelectStateSourceResponsePtr;
typedef boost::shared_ptr< ::quadrotor_input::SelectStateSourceResponse const> SelectStateSourceResponseConstPtr;


struct SelectStateSource
{

typedef SelectStateSourceRequest Request;
typedef SelectStateSourceResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SelectStateSource
} // namespace quadrotor_input

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::quadrotor_input::SelectStateSourceRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::quadrotor_input::SelectStateSourceRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_input::SelectStateSourceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "210a52aa3c6055403a0fb5920bce78a8";
  }

  static const char* value(const  ::quadrotor_input::SelectStateSourceRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x210a52aa3c605540ULL;
  static const uint64_t static_value2 = 0x3a0fb5920bce78a8ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_input::SelectStateSourceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "quadrotor_input/SelectStateSourceRequest";
  }

  static const char* value(const  ::quadrotor_input::SelectStateSourceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_input::SelectStateSourceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string strPoseTopicSelected\n\
string strVelocityTopicSelected\n\
\n\
";
  }

  static const char* value(const  ::quadrotor_input::SelectStateSourceRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::quadrotor_input::SelectStateSourceResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::quadrotor_input::SelectStateSourceResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_input::SelectStateSourceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1633c17a5b2ed98c236852d24a2d1588";
  }

  static const char* value(const  ::quadrotor_input::SelectStateSourceResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1633c17a5b2ed98cULL;
  static const uint64_t static_value2 = 0x236852d24a2d1588ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_input::SelectStateSourceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "quadrotor_input/SelectStateSourceResponse";
  }

  static const char* value(const  ::quadrotor_input::SelectStateSourceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_input::SelectStateSourceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool bSuccess\n\
\n\
\n\
";
  }

  static const char* value(const  ::quadrotor_input::SelectStateSourceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::quadrotor_input::SelectStateSourceResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::quadrotor_input::SelectStateSourceRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.strPoseTopicSelected);
    stream.next(m.strVelocityTopicSelected);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SelectStateSourceRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::quadrotor_input::SelectStateSourceResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.bSuccess);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SelectStateSourceResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<quadrotor_input::SelectStateSource> {
  static const char* value() 
  {
    return "11317bd1430c644f8910ccd389a7161d";
  }

  static const char* value(const quadrotor_input::SelectStateSource&) { return value(); } 
};

template<>
struct DataType<quadrotor_input::SelectStateSource> {
  static const char* value() 
  {
    return "quadrotor_input/SelectStateSource";
  }

  static const char* value(const quadrotor_input::SelectStateSource&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<quadrotor_input::SelectStateSourceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "11317bd1430c644f8910ccd389a7161d";
  }

  static const char* value(const quadrotor_input::SelectStateSourceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<quadrotor_input::SelectStateSourceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "quadrotor_input/SelectStateSource";
  }

  static const char* value(const quadrotor_input::SelectStateSourceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<quadrotor_input::SelectStateSourceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "11317bd1430c644f8910ccd389a7161d";
  }

  static const char* value(const quadrotor_input::SelectStateSourceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<quadrotor_input::SelectStateSourceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "quadrotor_input/SelectStateSource";
  }

  static const char* value(const quadrotor_input::SelectStateSourceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // QUADROTOR_INPUT_SERVICE_SELECTSTATESOURCE_H

