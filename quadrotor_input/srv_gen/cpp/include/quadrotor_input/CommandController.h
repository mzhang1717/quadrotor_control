/* Auto-generated by genmsg_cpp for file /home/mingfeng/ros_workspace/quadrotor_input/srv/CommandController.srv */
#ifndef QUADROTOR_INPUT_SERVICE_COMMANDCONTROLLER_H
#define QUADROTOR_INPUT_SERVICE_COMMANDCONTROLLER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "nav_msgs/Path.h"



namespace quadrotor_input
{
template <class ContainerAllocator>
struct CommandControllerRequest_ {
  typedef CommandControllerRequest_<ContainerAllocator> Type;

  CommandControllerRequest_()
  : running(false)
  , path()
  , gains()
  {
  }

  CommandControllerRequest_(const ContainerAllocator& _alloc)
  : running(false)
  , path(_alloc)
  , gains(_alloc)
  {
  }

  typedef uint8_t _running_type;
  uint8_t running;

  typedef  ::nav_msgs::Path_<ContainerAllocator>  _path_type;
   ::nav_msgs::Path_<ContainerAllocator>  path;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _gains_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  gains;


  typedef boost::shared_ptr< ::quadrotor_input::CommandControllerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_input::CommandControllerRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CommandControllerRequest
typedef  ::quadrotor_input::CommandControllerRequest_<std::allocator<void> > CommandControllerRequest;

typedef boost::shared_ptr< ::quadrotor_input::CommandControllerRequest> CommandControllerRequestPtr;
typedef boost::shared_ptr< ::quadrotor_input::CommandControllerRequest const> CommandControllerRequestConstPtr;



template <class ContainerAllocator>
struct CommandControllerResponse_ {
  typedef CommandControllerResponse_<ContainerAllocator> Type;

  CommandControllerResponse_()
  : success(false)
  {
  }

  CommandControllerResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


  typedef boost::shared_ptr< ::quadrotor_input::CommandControllerResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_input::CommandControllerResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CommandControllerResponse
typedef  ::quadrotor_input::CommandControllerResponse_<std::allocator<void> > CommandControllerResponse;

typedef boost::shared_ptr< ::quadrotor_input::CommandControllerResponse> CommandControllerResponsePtr;
typedef boost::shared_ptr< ::quadrotor_input::CommandControllerResponse const> CommandControllerResponseConstPtr;


struct CommandController
{

typedef CommandControllerRequest Request;
typedef CommandControllerResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct CommandController
} // namespace quadrotor_input

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::quadrotor_input::CommandControllerRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::quadrotor_input::CommandControllerRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_input::CommandControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4c1f7c524005be02143b57ce7521da33";
  }

  static const char* value(const  ::quadrotor_input::CommandControllerRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4c1f7c524005be02ULL;
  static const uint64_t static_value2 = 0x143b57ce7521da33ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_input::CommandControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "quadrotor_input/CommandControllerRequest";
  }

  static const char* value(const  ::quadrotor_input::CommandControllerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_input::CommandControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool running\n\
nav_msgs/Path path\n\
float64[] gains\n\
\n\
\n\
================================================================================\n\
MSG: nav_msgs/Path\n\
#An array of poses that represents a Path for a robot to follow\n\
Header header\n\
geometry_msgs/PoseStamped[] poses\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::quadrotor_input::CommandControllerRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::quadrotor_input::CommandControllerResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::quadrotor_input::CommandControllerResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_input::CommandControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::quadrotor_input::CommandControllerResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_input::CommandControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "quadrotor_input/CommandControllerResponse";
  }

  static const char* value(const  ::quadrotor_input::CommandControllerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_input::CommandControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
\n\
";
  }

  static const char* value(const  ::quadrotor_input::CommandControllerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::quadrotor_input::CommandControllerResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::quadrotor_input::CommandControllerRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.running);
    stream.next(m.path);
    stream.next(m.gains);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CommandControllerRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::quadrotor_input::CommandControllerResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CommandControllerResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<quadrotor_input::CommandController> {
  static const char* value() 
  {
    return "f9a093ac383daf30a9e686870d8c6fc4";
  }

  static const char* value(const quadrotor_input::CommandController&) { return value(); } 
};

template<>
struct DataType<quadrotor_input::CommandController> {
  static const char* value() 
  {
    return "quadrotor_input/CommandController";
  }

  static const char* value(const quadrotor_input::CommandController&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<quadrotor_input::CommandControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f9a093ac383daf30a9e686870d8c6fc4";
  }

  static const char* value(const quadrotor_input::CommandControllerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<quadrotor_input::CommandControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "quadrotor_input/CommandController";
  }

  static const char* value(const quadrotor_input::CommandControllerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<quadrotor_input::CommandControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f9a093ac383daf30a9e686870d8c6fc4";
  }

  static const char* value(const quadrotor_input::CommandControllerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<quadrotor_input::CommandControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "quadrotor_input/CommandController";
  }

  static const char* value(const quadrotor_input::CommandControllerResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // QUADROTOR_INPUT_SERVICE_COMMANDCONTROLLER_H

