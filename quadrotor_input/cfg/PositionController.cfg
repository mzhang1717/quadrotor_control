#!/usr/bin/env python

PACKAGE = "quadrotor_input"
import roslib;roslib.load_manifest(PACKAGE)
from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

#       Name    Type    Level   Description         Default  Min   Max
gen.add("xy_active",  bool_t, 0, "XY control active", True)

# Tau control - Ben
gen.add("tau_enabled",  bool_t, 0, "Tau control active", False)
gen.add("vertical_tau_only",  bool_t, 0, "Only vertical tau", True)

gen.add("vertical_offset", double_t, 0, "Vertical offset for Tau landing", 0, -10.0, 10.0)
gen.add("horizontal_offset", double_t, 0, "Horizontal offset for Tau landing", 0, -10.0, 10.0)
gen.add("tf", double_t, 0, "Desired time for Tau maneuver", 0, 3.0, 30.0)

gen.add("kp_x_scale", double_t, 0, "Scaling factor for Tau controller, kp_x", 0, 0.01, 100.0)
gen.add("ki_x_scale", double_t, 0, "Scaling factor for Tau controller, ki_x", 0, 0.01, 100.0)
gen.add("kd_x_scale", double_t, 0, "Scaling factor for Tau controller, kd_x", 0, 0.01, 100.0)
gen.add("kp_z_scale", double_t, 0, "Scaling factor for Tau controller, kp_z", 0, 0.01, 100.0)
gen.add("ki_z_scale", double_t, 0, "Scaling factor for Tau controller, ki_z", 0, 0.01, 100.0)
gen.add("kd_z_scale", double_t, 0, "Scaling factor for Tau controller, kd_z", 0, 0.01, 100.0)
# End tau control - Ben

gen.add("xy_p", double_t, 0, "XY Pos Proportional Gain", 0, 0.0, 10.0)
gen.add("xy_i", double_t, 0, "XY Pos Integral Gain", 0.0, 0.0, 10.0)
gen.add("xy_d", double_t, 0, "XY Pos Derivative Gain", 0.0, 0.0, 10.0)
gen.add("xy_i_min", double_t, 0, "XY Pos Integral Min Limit", 0.0, -10.0, 0.0)
gen.add("xy_i_max", double_t, 0, "XY Pos Integral Max Limit", 0.0, 0.0, 10.0)

gen.add("vxy_p", double_t, 0, "XY Speed Proportional Gain", 0, 0.0, 10.0)
gen.add("vxy_i", double_t, 0, "XY Speed Integral Gain", 0.0, 0.0, 10.0)
gen.add("vxy_d", double_t, 0, "XY Speed Derivative Gain", 0.0, 0.0, 10.0)
gen.add("vxy_i_min", double_t, 0, "XY Speed Integral Min Limit", 0.0, -10.0, 0.0)
gen.add("vxy_i_max", double_t, 0, "XY Speed Integral Max Limit", 0.0, 0.0, 10.0)

gen.add("z_p", double_t, 0, "Z Pos Proportional Gain", 0, 0.0, 10.0)
gen.add("z_i", double_t, 0, "Z Pos Integral Gain", 0.0, 0.0, 10.0)
gen.add("z_d", double_t, 0, "Z Pos Derivative Gain", 0.0, 0.0, 10.0)
gen.add("z_i_min", double_t, 0, "Z Pos Integral Min Limit", 0.0, -10.0, 0.0)
gen.add("z_i_max", double_t, 0, "Z Pos Integral Max Limit", 0.0, 0.0, 10.0)

gen.add("vz_p", double_t, 0, "Z Speed Proportional Gain", 0, 0.0, 10.0)
gen.add("vz_i", double_t, 0, "Z Speed Integral Gain", 0.0, 0.0, 10.0)
gen.add("vz_d", double_t, 0, "Z Speed Derivative Gain", 0.0, 0.0, 10.0)
gen.add("vz_i_min", double_t, 0, "Z Speed Integral Min Limit", 0.0, -10.0, 0.0)
gen.add("vz_i_max", double_t, 0, "Z Speed Integral Max Limit", 0.0, 0.0, 10.0)

gen.add("yaw_p", double_t, 0, "Yaw Angle Proportional Gain", 0, 0.0, 10.0)
gen.add("yaw_i", double_t, 0, "Yaw Angle Integral Gain", 0.0, 0.0, 10.0)
gen.add("yaw_d", double_t, 0, "Yaw Angle Derivative Gain", 0.0, 0.0, 10.0)
gen.add("yaw_i_min", double_t, 0, "Yaw Angle Integral Min Limit", 0.0, -1.0, 0.0)
gen.add("yaw_i_max", double_t, 0, "Yaw Angle Integral Max Limit", 0.0, 0.0, 1.0)

gen.add("xyspeedLimit", double_t, 0, "Horizontal speed limit (m/s)", 0, 0, 3.0)
gen.add("pitchLimit", double_t, 0, "Pitch command limit (rad)", 0, 0, 0.5)
gen.add("rollLimit", double_t, 0, "Roll command limit (rad)", 0, 0, 0.5)  

gen.add("yawrateLimit", double_t, 0, "Yaw rate command limit (rad/s)", 0, 0, 0.5) 

gen.add("zspeedLimit", double_t, 0, "Vertical speed limit (m/s)", 0, 0, 2.0)
gen.add("ascendingSpeedMax", double_t, 0, "Ascending speed limit during take-off (m/s)", 0, 0, 1.0)
gen.add("descendingSpeedMax", double_t, 0, "Descending speed limit during landing (m/s)", 0, 0, 1.0)
gen.add("touchdownSpeedMax", double_t, 0, "Descending speed limit before touch down during  landing (m/s)", 0, 0, 1.0)

gen.add("throttleHighLimit", double_t, 0, "Upper limit of throttle (rad/s)", 0, 0, 1.0) 
gen.add("throttleLowLimit", double_t, 0, "Lower limit of throttle (rad/s)", 0, 0, 0.5) 

gen.add("base_throttle_start", double_t, 0, "Base Throttle Start", 0, 0, 1.0)
gen.add("voltage_start", double_t, 0, "Voltage Start", 0, 10.0, 20.0)
gen.add("base_throttle_end", double_t, 0, "Base Throttle End", 0, 0, 1.0)
gen.add("voltage_end", double_t, 0, "Voltage End", 0, 10.0, 20.0)
gen.add("mass", double_t, 0, "Aircraft Mass", 2.0, 0.1, 10.0)

gen.add("x_des", double_t, 0, "X position", 0.0, -5.0, 5.0)
gen.add("y_des", double_t, 0, "Y position", 0.0, -5.0, 5.0)
gen.add("z_des", double_t, 0, "Z position", 0.2, -2.0, 10.0)
gen.add("yaw_des", double_t, 0, "Yaw Angle", 0.0, -180.0, 180.0)

gen.add("pid_xy_limit", double_t, 0, "Limit of PID XY Command (abs)", 0, 0, 1.0)
gen.add("cmd_xy_max", double_t, 0, "XY Pos Max PID Command (abs)", 0, 0, 1.0)
gen.add("cmd_xy_min", double_t, 0, "XY Pos Min PID Command (abs)", 0, -1.0, 0)

gen.add("pid_vxy_limit", double_t, 0, "Limit of PID XY Speed Command (abs)", 0, 0, 1.0)
gen.add("cmd_vxy_max", double_t, 0, "XY Speed Max PID Command (abs)", 0, 0, 1.0)
gen.add("cmd_vxy_min", double_t, 0, "XY Speed Min PID Command (abs)", 0, -1.0, 0)

gen.add("pid_z_limit", double_t, 0, "Limit of PID Z Command (abs)", 0, 0, 1.0)
gen.add("cmd_z_max", double_t, 0, "Z Pos Max PID Command (abs)", 0, 0, 1.0)
gen.add("cmd_z_min", double_t, 0, "Z Pos Min PID Command (abs)", 0, 0, 1.0)

gen.add("pid_vz_limit", double_t, 0, "Limit of PID Z Speed Command (abs)", 0, 0, 1.0)
gen.add("cmd_vz_max", double_t, 0, "Z Speed Max PID Command (abs)", 0, 0, 1.0)
gen.add("cmd_vz_min", double_t, 0, "Z Speed Min PID Command (abs)", 0, 0, 1.0)

gen.add("pid_yaw_limit", double_t, 0, "Limit of PID Yaw Angle Command (abs)", 0, 0, 1.0)
gen.add("cmd_yaw_max", double_t, 0, "Yaw Angle Max PID Command (abs)", 0, 0, 1.0)
gen.add("cmd_yaw_min", double_t, 0, "Yaw Angle Min PID Command (abs)", 0, 0, 1.0)

exit(gen.generate(PACKAGE, "quadrotor_input", "PositionController"))
