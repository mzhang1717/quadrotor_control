"""autogenerated by genpy from state_estimation/AircraftStateCalibMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class AircraftStateCalibMsg(genpy.Message):
  _md5sum = "391e803414d8347989ae2ed97dfcdad3"
  _type = "state_estimation/AircraftStateCalibMsg"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
geometry_msgs/Point position
geometry_msgs/Quaternion rotation
geometry_msgs/Vector3 velocity
geometry_msgs/Vector3 accel_bias
geometry_msgs/Vector3 gyro_bias
geometry_msgs/Point pos_c
geometry_msgs/Quaternion rot_c
geometry_msgs/Point pos_v
geometry_msgs/Quaternion rot_v
float64[729] covariance

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['header','position','rotation','velocity','accel_bias','gyro_bias','pos_c','rot_c','pos_v','rot_v','covariance']
  _slot_types = ['std_msgs/Header','geometry_msgs/Point','geometry_msgs/Quaternion','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Point','geometry_msgs/Quaternion','geometry_msgs/Point','geometry_msgs/Quaternion','float64[729]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,position,rotation,velocity,accel_bias,gyro_bias,pos_c,rot_c,pos_v,rot_v,covariance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AircraftStateCalibMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.rotation is None:
        self.rotation = geometry_msgs.msg.Quaternion()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.accel_bias is None:
        self.accel_bias = geometry_msgs.msg.Vector3()
      if self.gyro_bias is None:
        self.gyro_bias = geometry_msgs.msg.Vector3()
      if self.pos_c is None:
        self.pos_c = geometry_msgs.msg.Point()
      if self.rot_c is None:
        self.rot_c = geometry_msgs.msg.Quaternion()
      if self.pos_v is None:
        self.pos_v = geometry_msgs.msg.Point()
      if self.rot_v is None:
        self.rot_v = geometry_msgs.msg.Quaternion()
      if self.covariance is None:
        self.covariance
    else:
      self.header = std_msgs.msg.Header()
      self.position = geometry_msgs.msg.Point()
      self.rotation = geometry_msgs.msg.Quaternion()
      self.velocity = geometry_msgs.msg.Vector3()
      self.accel_bias = geometry_msgs.msg.Vector3()
      self.gyro_bias = geometry_msgs.msg.Vector3()
      self.pos_c = geometry_msgs.msg.Point()
      self.rot_c = geometry_msgs.msg.Quaternion()
      self.pos_v = geometry_msgs.msg.Point()
      self.rot_v = geometry_msgs.msg.Quaternion()
      self.covariance

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_30d.pack(_x.position.x, _x.position.y, _x.position.z, _x.rotation.x, _x.rotation.y, _x.rotation.z, _x.rotation.w, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.accel_bias.x, _x.accel_bias.y, _x.accel_bias.z, _x.gyro_bias.x, _x.gyro_bias.y, _x.gyro_bias.z, _x.pos_c.x, _x.pos_c.y, _x.pos_c.z, _x.rot_c.x, _x.rot_c.y, _x.rot_c.z, _x.rot_c.w, _x.pos_v.x, _x.pos_v.y, _x.pos_v.z, _x.rot_v.x, _x.rot_v.y, _x.rot_v.z, _x.rot_v.w))
      buff.write(_struct_729d.pack(*self.covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.rotation is None:
        self.rotation = geometry_msgs.msg.Quaternion()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.accel_bias is None:
        self.accel_bias = geometry_msgs.msg.Vector3()
      if self.gyro_bias is None:
        self.gyro_bias = geometry_msgs.msg.Vector3()
      if self.pos_c is None:
        self.pos_c = geometry_msgs.msg.Point()
      if self.rot_c is None:
        self.rot_c = geometry_msgs.msg.Quaternion()
      if self.pos_v is None:
        self.pos_v = geometry_msgs.msg.Point()
      if self.rot_v is None:
        self.rot_v = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 240
      (_x.position.x, _x.position.y, _x.position.z, _x.rotation.x, _x.rotation.y, _x.rotation.z, _x.rotation.w, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.accel_bias.x, _x.accel_bias.y, _x.accel_bias.z, _x.gyro_bias.x, _x.gyro_bias.y, _x.gyro_bias.z, _x.pos_c.x, _x.pos_c.y, _x.pos_c.z, _x.rot_c.x, _x.rot_c.y, _x.rot_c.z, _x.rot_c.w, _x.pos_v.x, _x.pos_v.y, _x.pos_v.z, _x.rot_v.x, _x.rot_v.y, _x.rot_v.z, _x.rot_v.w,) = _struct_30d.unpack(str[start:end])
      start = end
      end += 5832
      self.covariance = _struct_729d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_30d.pack(_x.position.x, _x.position.y, _x.position.z, _x.rotation.x, _x.rotation.y, _x.rotation.z, _x.rotation.w, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.accel_bias.x, _x.accel_bias.y, _x.accel_bias.z, _x.gyro_bias.x, _x.gyro_bias.y, _x.gyro_bias.z, _x.pos_c.x, _x.pos_c.y, _x.pos_c.z, _x.rot_c.x, _x.rot_c.y, _x.rot_c.z, _x.rot_c.w, _x.pos_v.x, _x.pos_v.y, _x.pos_v.z, _x.rot_v.x, _x.rot_v.y, _x.rot_v.z, _x.rot_v.w))
      buff.write(self.covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.rotation is None:
        self.rotation = geometry_msgs.msg.Quaternion()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.accel_bias is None:
        self.accel_bias = geometry_msgs.msg.Vector3()
      if self.gyro_bias is None:
        self.gyro_bias = geometry_msgs.msg.Vector3()
      if self.pos_c is None:
        self.pos_c = geometry_msgs.msg.Point()
      if self.rot_c is None:
        self.rot_c = geometry_msgs.msg.Quaternion()
      if self.pos_v is None:
        self.pos_v = geometry_msgs.msg.Point()
      if self.rot_v is None:
        self.rot_v = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 240
      (_x.position.x, _x.position.y, _x.position.z, _x.rotation.x, _x.rotation.y, _x.rotation.z, _x.rotation.w, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.accel_bias.x, _x.accel_bias.y, _x.accel_bias.z, _x.gyro_bias.x, _x.gyro_bias.y, _x.gyro_bias.z, _x.pos_c.x, _x.pos_c.y, _x.pos_c.z, _x.rot_c.x, _x.rot_c.y, _x.rot_c.z, _x.rot_c.w, _x.pos_v.x, _x.pos_v.y, _x.pos_v.z, _x.rot_v.x, _x.rot_v.y, _x.rot_v.z, _x.rot_v.w,) = _struct_30d.unpack(str[start:end])
      start = end
      end += 5832
      self.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=729)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_729d = struct.Struct("<729d")
_struct_3I = struct.Struct("<3I")
_struct_30d = struct.Struct("<30d")
