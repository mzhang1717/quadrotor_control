/* Auto-generated by genmsg_cpp for file /home/mingfeng/ros_workspace/state_estimation/msg/AircraftStateCalibMsg.msg */
#ifndef STATE_ESTIMATION_MESSAGE_AIRCRAFTSTATECALIBMSG_H
#define STATE_ESTIMATION_MESSAGE_AIRCRAFTSTATECALIBMSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Quaternion.h"
#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Quaternion.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Quaternion.h"

namespace state_estimation
{
template <class ContainerAllocator>
struct AircraftStateCalibMsg_ {
  typedef AircraftStateCalibMsg_<ContainerAllocator> Type;

  AircraftStateCalibMsg_()
  : header()
  , position()
  , rotation()
  , velocity()
  , accel_bias()
  , gyro_bias()
  , pos_c()
  , rot_c()
  , pos_v()
  , rot_v()
  , covariance()
  {
    covariance.assign(0.0);
  }

  AircraftStateCalibMsg_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , position(_alloc)
  , rotation(_alloc)
  , velocity(_alloc)
  , accel_bias(_alloc)
  , gyro_bias(_alloc)
  , pos_c(_alloc)
  , rot_c(_alloc)
  , pos_v(_alloc)
  , rot_v(_alloc)
  , covariance()
  {
    covariance.assign(0.0);
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
   ::geometry_msgs::Point_<ContainerAllocator>  position;

  typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _rotation_type;
   ::geometry_msgs::Quaternion_<ContainerAllocator>  rotation;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  velocity;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _accel_bias_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  accel_bias;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _gyro_bias_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  gyro_bias;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pos_c_type;
   ::geometry_msgs::Point_<ContainerAllocator>  pos_c;

  typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _rot_c_type;
   ::geometry_msgs::Quaternion_<ContainerAllocator>  rot_c;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pos_v_type;
   ::geometry_msgs::Point_<ContainerAllocator>  pos_v;

  typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _rot_v_type;
   ::geometry_msgs::Quaternion_<ContainerAllocator>  rot_v;

  typedef boost::array<double, 729>  _covariance_type;
  boost::array<double, 729>  covariance;


  typedef boost::shared_ptr< ::state_estimation::AircraftStateCalibMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::state_estimation::AircraftStateCalibMsg_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AircraftStateCalibMsg
typedef  ::state_estimation::AircraftStateCalibMsg_<std::allocator<void> > AircraftStateCalibMsg;

typedef boost::shared_ptr< ::state_estimation::AircraftStateCalibMsg> AircraftStateCalibMsgPtr;
typedef boost::shared_ptr< ::state_estimation::AircraftStateCalibMsg const> AircraftStateCalibMsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::state_estimation::AircraftStateCalibMsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::state_estimation::AircraftStateCalibMsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace state_estimation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::state_estimation::AircraftStateCalibMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::state_estimation::AircraftStateCalibMsg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::state_estimation::AircraftStateCalibMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "391e803414d8347989ae2ed97dfcdad3";
  }

  static const char* value(const  ::state_estimation::AircraftStateCalibMsg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x391e803414d83479ULL;
  static const uint64_t static_value2 = 0x89ae2ed97dfcdad3ULL;
};

template<class ContainerAllocator>
struct DataType< ::state_estimation::AircraftStateCalibMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "state_estimation/AircraftStateCalibMsg";
  }

  static const char* value(const  ::state_estimation::AircraftStateCalibMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::state_estimation::AircraftStateCalibMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
geometry_msgs/Point position\n\
geometry_msgs/Quaternion rotation\n\
geometry_msgs/Vector3 velocity\n\
geometry_msgs/Vector3 accel_bias\n\
geometry_msgs/Vector3 gyro_bias\n\
geometry_msgs/Point pos_c\n\
geometry_msgs/Quaternion rot_c\n\
geometry_msgs/Point pos_v\n\
geometry_msgs/Quaternion rot_v\n\
float64[729] covariance\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::state_estimation::AircraftStateCalibMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::state_estimation::AircraftStateCalibMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::state_estimation::AircraftStateCalibMsg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::state_estimation::AircraftStateCalibMsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.position);
    stream.next(m.rotation);
    stream.next(m.velocity);
    stream.next(m.accel_bias);
    stream.next(m.gyro_bias);
    stream.next(m.pos_c);
    stream.next(m.rot_c);
    stream.next(m.pos_v);
    stream.next(m.rot_v);
    stream.next(m.covariance);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AircraftStateCalibMsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::state_estimation::AircraftStateCalibMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::state_estimation::AircraftStateCalibMsg_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "position: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "rotation: ";
s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.rotation);
    s << indent << "velocity: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "accel_bias: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.accel_bias);
    s << indent << "gyro_bias: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.gyro_bias);
    s << indent << "pos_c: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pos_c);
    s << indent << "rot_c: ";
s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.rot_c);
    s << indent << "pos_v: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pos_v);
    s << indent << "rot_v: ";
s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.rot_v);
    s << indent << "covariance[]" << std::endl;
    for (size_t i = 0; i < v.covariance.size(); ++i)
    {
      s << indent << "  covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.covariance[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // STATE_ESTIMATION_MESSAGE_AIRCRAFTSTATECALIBMSG_H

