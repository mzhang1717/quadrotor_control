/* Auto-generated by genmsg_cpp for file /home/mingfeng/ros_workspace/quadrotor_msgs/msg/ControllerError.msg */
#ifndef QUADROTOR_MSGS_MESSAGE_CONTROLLERERROR_H
#define QUADROTOR_MSGS_MESSAGE_CONTROLLERERROR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct ControllerError_ {
  typedef ControllerError_<ContainerAllocator> Type;

  ControllerError_()
  : error()
  , derivative()
  {
  }

  ControllerError_(const ContainerAllocator& _alloc)
  : error(_alloc)
  , derivative(_alloc)
  {
  }

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _error_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  error;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _derivative_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  derivative;


  typedef boost::shared_ptr< ::quadrotor_msgs::ControllerError_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::ControllerError_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ControllerError
typedef  ::quadrotor_msgs::ControllerError_<std::allocator<void> > ControllerError;

typedef boost::shared_ptr< ::quadrotor_msgs::ControllerError> ControllerErrorPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::ControllerError const> ControllerErrorConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::quadrotor_msgs::ControllerError_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::quadrotor_msgs::ControllerError_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::quadrotor_msgs::ControllerError_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::quadrotor_msgs::ControllerError_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::ControllerError_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9908a00929a52cd30ca2a8fb177726b1";
  }

  static const char* value(const  ::quadrotor_msgs::ControllerError_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9908a00929a52cd3ULL;
  static const uint64_t static_value2 = 0x0ca2a8fb177726b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::ControllerError_<ContainerAllocator> > {
  static const char* value() 
  {
    return "quadrotor_msgs/ControllerError";
  }

  static const char* value(const  ::quadrotor_msgs::ControllerError_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::ControllerError_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Vector3 error\n\
geometry_msgs/Vector3 derivative\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::quadrotor_msgs::ControllerError_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::quadrotor_msgs::ControllerError_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::ControllerError_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.error);
    stream.next(m.derivative);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ControllerError_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::ControllerError_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::quadrotor_msgs::ControllerError_<ContainerAllocator> & v) 
  {
    s << indent << "error: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.error);
    s << indent << "derivative: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.derivative);
  }
};


} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_CONTROLLERERROR_H

