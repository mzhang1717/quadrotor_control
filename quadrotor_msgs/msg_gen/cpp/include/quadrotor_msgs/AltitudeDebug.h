/* Auto-generated by genmsg_cpp for file /home/mingfeng/ros_workspace/quadrotor_msgs/msg/AltitudeDebug.msg */
#ifndef QUADROTOR_MSGS_MESSAGE_ALTITUDEDEBUG_H
#define QUADROTOR_MSGS_MESSAGE_ALTITUDEDEBUG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct AltitudeDebug_ {
  typedef AltitudeDebug_<ContainerAllocator> Type;

  AltitudeDebug_()
  : p_error(0.0)
  , i_error(0.0)
  , d_error(0.0)
  , cmd(0.0)
  , cmd_limited(0.0)
  , z(0.0)
  , z_des(0.0)
  , base_throttle(0.0)
  , throttle(0.0)
  , scale(0.0)
  , voltage(0.0)
  {
  }

  AltitudeDebug_(const ContainerAllocator& _alloc)
  : p_error(0.0)
  , i_error(0.0)
  , d_error(0.0)
  , cmd(0.0)
  , cmd_limited(0.0)
  , z(0.0)
  , z_des(0.0)
  , base_throttle(0.0)
  , throttle(0.0)
  , scale(0.0)
  , voltage(0.0)
  {
  }

  typedef double _p_error_type;
  double p_error;

  typedef double _i_error_type;
  double i_error;

  typedef double _d_error_type;
  double d_error;

  typedef double _cmd_type;
  double cmd;

  typedef double _cmd_limited_type;
  double cmd_limited;

  typedef double _z_type;
  double z;

  typedef double _z_des_type;
  double z_des;

  typedef double _base_throttle_type;
  double base_throttle;

  typedef double _throttle_type;
  double throttle;

  typedef double _scale_type;
  double scale;

  typedef double _voltage_type;
  double voltage;


  typedef boost::shared_ptr< ::quadrotor_msgs::AltitudeDebug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::AltitudeDebug_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AltitudeDebug
typedef  ::quadrotor_msgs::AltitudeDebug_<std::allocator<void> > AltitudeDebug;

typedef boost::shared_ptr< ::quadrotor_msgs::AltitudeDebug> AltitudeDebugPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::AltitudeDebug const> AltitudeDebugConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::quadrotor_msgs::AltitudeDebug_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::quadrotor_msgs::AltitudeDebug_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::quadrotor_msgs::AltitudeDebug_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::quadrotor_msgs::AltitudeDebug_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::AltitudeDebug_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0eeff40074d8bc6fbac2ac754822d6ba";
  }

  static const char* value(const  ::quadrotor_msgs::AltitudeDebug_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0eeff40074d8bc6fULL;
  static const uint64_t static_value2 = 0xbac2ac754822d6baULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::AltitudeDebug_<ContainerAllocator> > {
  static const char* value() 
  {
    return "quadrotor_msgs/AltitudeDebug";
  }

  static const char* value(const  ::quadrotor_msgs::AltitudeDebug_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::AltitudeDebug_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 p_error\n\
float64 i_error\n\
float64 d_error\n\
float64 cmd\n\
float64 cmd_limited\n\
float64 z\n\
float64 z_des\n\
float64 base_throttle\n\
float64 throttle\n\
float64 scale\n\
float64 voltage\n\
\n\
";
  }

  static const char* value(const  ::quadrotor_msgs::AltitudeDebug_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::quadrotor_msgs::AltitudeDebug_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::AltitudeDebug_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.p_error);
    stream.next(m.i_error);
    stream.next(m.d_error);
    stream.next(m.cmd);
    stream.next(m.cmd_limited);
    stream.next(m.z);
    stream.next(m.z_des);
    stream.next(m.base_throttle);
    stream.next(m.throttle);
    stream.next(m.scale);
    stream.next(m.voltage);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AltitudeDebug_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::AltitudeDebug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::quadrotor_msgs::AltitudeDebug_<ContainerAllocator> & v) 
  {
    s << indent << "p_error: ";
    Printer<double>::stream(s, indent + "  ", v.p_error);
    s << indent << "i_error: ";
    Printer<double>::stream(s, indent + "  ", v.i_error);
    s << indent << "d_error: ";
    Printer<double>::stream(s, indent + "  ", v.d_error);
    s << indent << "cmd: ";
    Printer<double>::stream(s, indent + "  ", v.cmd);
    s << indent << "cmd_limited: ";
    Printer<double>::stream(s, indent + "  ", v.cmd_limited);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "z_des: ";
    Printer<double>::stream(s, indent + "  ", v.z_des);
    s << indent << "base_throttle: ";
    Printer<double>::stream(s, indent + "  ", v.base_throttle);
    s << indent << "throttle: ";
    Printer<double>::stream(s, indent + "  ", v.throttle);
    s << indent << "scale: ";
    Printer<double>::stream(s, indent + "  ", v.scale);
    s << indent << "voltage: ";
    Printer<double>::stream(s, indent + "  ", v.voltage);
  }
};


} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_ALTITUDEDEBUG_H

