/* Auto-generated by genmsg_cpp for file /home/mingfeng/ros_workspace/quadrotor_msgs/msg/StateDebug.msg */
#ifndef QUADROTOR_MSGS_MESSAGE_STATEDEBUG_H
#define QUADROTOR_MSGS_MESSAGE_STATEDEBUG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct StateDebug_ {
  typedef StateDebug_<ContainerAllocator> Type;

  StateDebug_()
  : attitude()
  , attitude_desired()
  {
  }

  StateDebug_(const ContainerAllocator& _alloc)
  : attitude(_alloc)
  , attitude_desired(_alloc)
  {
  }

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _attitude_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  attitude;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _attitude_desired_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  attitude_desired;


  typedef boost::shared_ptr< ::quadrotor_msgs::StateDebug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::StateDebug_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StateDebug
typedef  ::quadrotor_msgs::StateDebug_<std::allocator<void> > StateDebug;

typedef boost::shared_ptr< ::quadrotor_msgs::StateDebug> StateDebugPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::StateDebug const> StateDebugConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::quadrotor_msgs::StateDebug_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::quadrotor_msgs::StateDebug_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::quadrotor_msgs::StateDebug_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::quadrotor_msgs::StateDebug_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::StateDebug_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4036a591967e8dadfb66a9590c8f625e";
  }

  static const char* value(const  ::quadrotor_msgs::StateDebug_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4036a591967e8dadULL;
  static const uint64_t static_value2 = 0xfb66a9590c8f625eULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::StateDebug_<ContainerAllocator> > {
  static const char* value() 
  {
    return "quadrotor_msgs/StateDebug";
  }

  static const char* value(const  ::quadrotor_msgs::StateDebug_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::StateDebug_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Vector3 attitude\n\
geometry_msgs/Vector3 attitude_desired\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::quadrotor_msgs::StateDebug_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::quadrotor_msgs::StateDebug_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::StateDebug_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.attitude);
    stream.next(m.attitude_desired);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StateDebug_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::StateDebug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::quadrotor_msgs::StateDebug_<ContainerAllocator> & v) 
  {
    s << indent << "attitude: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.attitude);
    s << indent << "attitude_desired: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.attitude_desired);
  }
};


} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_STATEDEBUG_H

