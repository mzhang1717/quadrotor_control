"""autogenerated by genpy from quadrotor_msgs/PositionDebug.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class PositionDebug(genpy.Message):
  _md5sum = "93d1333b166d8ea6c1d79f7209332822"
  _type = "quadrotor_msgs/PositionDebug"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 base_throttle
float64 scale
float64 voltage
geometry_msgs/Vector3 xy_error
geometry_msgs/Vector3 vx_error
geometry_msgs/Vector3 vy_error
geometry_msgs/Vector3 z_error
geometry_msgs/Vector3 vz_error
geometry_msgs/Vector3 yaw_error
geometry_msgs/Quaternion desired_xyz_yaw
geometry_msgs/Quaternion current_xyz_yaw
geometry_msgs/Vector3 desired_velocity
geometry_msgs/Vector3 desired_acceleration
geometry_msgs/Quaternion cmd
geometry_msgs/Quaternion cmd_limited

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['base_throttle','scale','voltage','xy_error','vx_error','vy_error','z_error','vz_error','yaw_error','desired_xyz_yaw','current_xyz_yaw','desired_velocity','desired_acceleration','cmd','cmd_limited']
  _slot_types = ['float64','float64','float64','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Quaternion','geometry_msgs/Quaternion','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Quaternion','geometry_msgs/Quaternion']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       base_throttle,scale,voltage,xy_error,vx_error,vy_error,z_error,vz_error,yaw_error,desired_xyz_yaw,current_xyz_yaw,desired_velocity,desired_acceleration,cmd,cmd_limited

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PositionDebug, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.base_throttle is None:
        self.base_throttle = 0.
      if self.scale is None:
        self.scale = 0.
      if self.voltage is None:
        self.voltage = 0.
      if self.xy_error is None:
        self.xy_error = geometry_msgs.msg.Vector3()
      if self.vx_error is None:
        self.vx_error = geometry_msgs.msg.Vector3()
      if self.vy_error is None:
        self.vy_error = geometry_msgs.msg.Vector3()
      if self.z_error is None:
        self.z_error = geometry_msgs.msg.Vector3()
      if self.vz_error is None:
        self.vz_error = geometry_msgs.msg.Vector3()
      if self.yaw_error is None:
        self.yaw_error = geometry_msgs.msg.Vector3()
      if self.desired_xyz_yaw is None:
        self.desired_xyz_yaw = geometry_msgs.msg.Quaternion()
      if self.current_xyz_yaw is None:
        self.current_xyz_yaw = geometry_msgs.msg.Quaternion()
      if self.desired_velocity is None:
        self.desired_velocity = geometry_msgs.msg.Vector3()
      if self.desired_acceleration is None:
        self.desired_acceleration = geometry_msgs.msg.Vector3()
      if self.cmd is None:
        self.cmd = geometry_msgs.msg.Quaternion()
      if self.cmd_limited is None:
        self.cmd_limited = geometry_msgs.msg.Quaternion()
    else:
      self.base_throttle = 0.
      self.scale = 0.
      self.voltage = 0.
      self.xy_error = geometry_msgs.msg.Vector3()
      self.vx_error = geometry_msgs.msg.Vector3()
      self.vy_error = geometry_msgs.msg.Vector3()
      self.z_error = geometry_msgs.msg.Vector3()
      self.vz_error = geometry_msgs.msg.Vector3()
      self.yaw_error = geometry_msgs.msg.Vector3()
      self.desired_xyz_yaw = geometry_msgs.msg.Quaternion()
      self.current_xyz_yaw = geometry_msgs.msg.Quaternion()
      self.desired_velocity = geometry_msgs.msg.Vector3()
      self.desired_acceleration = geometry_msgs.msg.Vector3()
      self.cmd = geometry_msgs.msg.Quaternion()
      self.cmd_limited = geometry_msgs.msg.Quaternion()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_43d.pack(_x.base_throttle, _x.scale, _x.voltage, _x.xy_error.x, _x.xy_error.y, _x.xy_error.z, _x.vx_error.x, _x.vx_error.y, _x.vx_error.z, _x.vy_error.x, _x.vy_error.y, _x.vy_error.z, _x.z_error.x, _x.z_error.y, _x.z_error.z, _x.vz_error.x, _x.vz_error.y, _x.vz_error.z, _x.yaw_error.x, _x.yaw_error.y, _x.yaw_error.z, _x.desired_xyz_yaw.x, _x.desired_xyz_yaw.y, _x.desired_xyz_yaw.z, _x.desired_xyz_yaw.w, _x.current_xyz_yaw.x, _x.current_xyz_yaw.y, _x.current_xyz_yaw.z, _x.current_xyz_yaw.w, _x.desired_velocity.x, _x.desired_velocity.y, _x.desired_velocity.z, _x.desired_acceleration.x, _x.desired_acceleration.y, _x.desired_acceleration.z, _x.cmd.x, _x.cmd.y, _x.cmd.z, _x.cmd.w, _x.cmd_limited.x, _x.cmd_limited.y, _x.cmd_limited.z, _x.cmd_limited.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.xy_error is None:
        self.xy_error = geometry_msgs.msg.Vector3()
      if self.vx_error is None:
        self.vx_error = geometry_msgs.msg.Vector3()
      if self.vy_error is None:
        self.vy_error = geometry_msgs.msg.Vector3()
      if self.z_error is None:
        self.z_error = geometry_msgs.msg.Vector3()
      if self.vz_error is None:
        self.vz_error = geometry_msgs.msg.Vector3()
      if self.yaw_error is None:
        self.yaw_error = geometry_msgs.msg.Vector3()
      if self.desired_xyz_yaw is None:
        self.desired_xyz_yaw = geometry_msgs.msg.Quaternion()
      if self.current_xyz_yaw is None:
        self.current_xyz_yaw = geometry_msgs.msg.Quaternion()
      if self.desired_velocity is None:
        self.desired_velocity = geometry_msgs.msg.Vector3()
      if self.desired_acceleration is None:
        self.desired_acceleration = geometry_msgs.msg.Vector3()
      if self.cmd is None:
        self.cmd = geometry_msgs.msg.Quaternion()
      if self.cmd_limited is None:
        self.cmd_limited = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 344
      (_x.base_throttle, _x.scale, _x.voltage, _x.xy_error.x, _x.xy_error.y, _x.xy_error.z, _x.vx_error.x, _x.vx_error.y, _x.vx_error.z, _x.vy_error.x, _x.vy_error.y, _x.vy_error.z, _x.z_error.x, _x.z_error.y, _x.z_error.z, _x.vz_error.x, _x.vz_error.y, _x.vz_error.z, _x.yaw_error.x, _x.yaw_error.y, _x.yaw_error.z, _x.desired_xyz_yaw.x, _x.desired_xyz_yaw.y, _x.desired_xyz_yaw.z, _x.desired_xyz_yaw.w, _x.current_xyz_yaw.x, _x.current_xyz_yaw.y, _x.current_xyz_yaw.z, _x.current_xyz_yaw.w, _x.desired_velocity.x, _x.desired_velocity.y, _x.desired_velocity.z, _x.desired_acceleration.x, _x.desired_acceleration.y, _x.desired_acceleration.z, _x.cmd.x, _x.cmd.y, _x.cmd.z, _x.cmd.w, _x.cmd_limited.x, _x.cmd_limited.y, _x.cmd_limited.z, _x.cmd_limited.w,) = _struct_43d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_43d.pack(_x.base_throttle, _x.scale, _x.voltage, _x.xy_error.x, _x.xy_error.y, _x.xy_error.z, _x.vx_error.x, _x.vx_error.y, _x.vx_error.z, _x.vy_error.x, _x.vy_error.y, _x.vy_error.z, _x.z_error.x, _x.z_error.y, _x.z_error.z, _x.vz_error.x, _x.vz_error.y, _x.vz_error.z, _x.yaw_error.x, _x.yaw_error.y, _x.yaw_error.z, _x.desired_xyz_yaw.x, _x.desired_xyz_yaw.y, _x.desired_xyz_yaw.z, _x.desired_xyz_yaw.w, _x.current_xyz_yaw.x, _x.current_xyz_yaw.y, _x.current_xyz_yaw.z, _x.current_xyz_yaw.w, _x.desired_velocity.x, _x.desired_velocity.y, _x.desired_velocity.z, _x.desired_acceleration.x, _x.desired_acceleration.y, _x.desired_acceleration.z, _x.cmd.x, _x.cmd.y, _x.cmd.z, _x.cmd.w, _x.cmd_limited.x, _x.cmd_limited.y, _x.cmd_limited.z, _x.cmd_limited.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.xy_error is None:
        self.xy_error = geometry_msgs.msg.Vector3()
      if self.vx_error is None:
        self.vx_error = geometry_msgs.msg.Vector3()
      if self.vy_error is None:
        self.vy_error = geometry_msgs.msg.Vector3()
      if self.z_error is None:
        self.z_error = geometry_msgs.msg.Vector3()
      if self.vz_error is None:
        self.vz_error = geometry_msgs.msg.Vector3()
      if self.yaw_error is None:
        self.yaw_error = geometry_msgs.msg.Vector3()
      if self.desired_xyz_yaw is None:
        self.desired_xyz_yaw = geometry_msgs.msg.Quaternion()
      if self.current_xyz_yaw is None:
        self.current_xyz_yaw = geometry_msgs.msg.Quaternion()
      if self.desired_velocity is None:
        self.desired_velocity = geometry_msgs.msg.Vector3()
      if self.desired_acceleration is None:
        self.desired_acceleration = geometry_msgs.msg.Vector3()
      if self.cmd is None:
        self.cmd = geometry_msgs.msg.Quaternion()
      if self.cmd_limited is None:
        self.cmd_limited = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 344
      (_x.base_throttle, _x.scale, _x.voltage, _x.xy_error.x, _x.xy_error.y, _x.xy_error.z, _x.vx_error.x, _x.vx_error.y, _x.vx_error.z, _x.vy_error.x, _x.vy_error.y, _x.vy_error.z, _x.z_error.x, _x.z_error.y, _x.z_error.z, _x.vz_error.x, _x.vz_error.y, _x.vz_error.z, _x.yaw_error.x, _x.yaw_error.y, _x.yaw_error.z, _x.desired_xyz_yaw.x, _x.desired_xyz_yaw.y, _x.desired_xyz_yaw.z, _x.desired_xyz_yaw.w, _x.current_xyz_yaw.x, _x.current_xyz_yaw.y, _x.current_xyz_yaw.z, _x.current_xyz_yaw.w, _x.desired_velocity.x, _x.desired_velocity.y, _x.desired_velocity.z, _x.desired_acceleration.x, _x.desired_acceleration.y, _x.desired_acceleration.z, _x.cmd.x, _x.cmd.y, _x.cmd.z, _x.cmd.w, _x.cmd_limited.x, _x.cmd_limited.y, _x.cmd_limited.z, _x.cmd_limited.w,) = _struct_43d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_43d = struct.Struct("<43d")
